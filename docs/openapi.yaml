openapi: 3.0.0
info:
  title: Фильмотека OpenAPI спецификация
  version: "1.0.0"
servers:
  # Added by API Auto Mocking Plugin
#  - description: SwaggerHub API Auto Mocking
#    url: https://virtserver.swaggerhub.com/r.cf2003_yandex.ru/filmoteka/1.0.0
  - url: https://localhost:8080/saljaev/filmoteka/v1
    description: Local server
tags:
  - name: admins
    description: Операции доступные админам
  - name: users
    description: Операции доступные пользователям
  - name: User
    description: Операции с пользователями
  - name: Actor
    description: Операции с актерами
  - name: Film
    description: Операции с фильмами


paths:
  /user/register:
    post:
      summary: Регистирование пользователя
      tags:
        - User
        - users
        - admins
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        '200':
          description: Успешная регистрация
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserID"
        '500':
          description: Ошибка со стороны сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorJSON500"

  /user/login:
    post:
      summary: Аутентификация и идентификация пользователя
      tags:
        - User
        - users
        - admins
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        '200':
          description: Пользователь аутентифицирован
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserID"
        '400':
          description: Неправильный логин или пароль
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorJSON400"
        '500':
          description: Ошибка со стороны сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorJSON500"

  /user/{id}:
    delete:
      summary: Удаление пользователя
      tags:
        - User
        - admins
      parameters:
        - name: id
          in: path
          required: true
          description: ID пользователя
          schema:
            type: string
            example: 111
      responses:
        '200':
          description: Пользователь удалён
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserID"
        '400':
          description: Не валидный ID пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorJSON400"
        '401':
          description: Пользователь не авторизирован
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorJSON401"
        '403':
          description: Недостаточно прав
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorJSON403"
        '500':
          description: Ошибка со стороны сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorJSON500"



  /film:
    post:
      summary: Добавление фильма и его актеров
      tags:
        - Film
        - admins
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FilmWithActor"
      responses:
        '200':
          description: Успешное добавление
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FilmID"
        '400':
          description: Невалидный запрос
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorJSON400"
        '401':
          description: Пользователь не авторизирован
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorJSON401"
        '403':
          description: Недостаточно прав
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorJSON403"
        '500':
          description: Ошибка со стороны сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorJSON500"

  /film/update/{id}:
    post:
      summary: Обновление информации о фильме
      tags:
        - Film
        - admins
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FilmWithActorToUpdate"
      responses:
        '200':
          description: Успешное обновление
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FilmID"
        '400':
          description: Невалидный ID фильма
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorJSON400"
        '401':
          description: Пользователь не авторизирован
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorJSON401"
        '403':
          description: Недостаточно прав
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorJSON403"
        '500':
          description: Ошибка со стороны сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorJSON500"
  /film/{id}:
    delete:
      summary: Удаление фильма
      tags:
        - Film
        - admins
      parameters:
        - name: id
          in: path
          required: true
          description: ID фильма
          schema:
            type: string
            example: 11
      responses:
        '200':
          description: Фильм удалён
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FilmID"
        '400':
          description: Неавлидный ID фильма
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorJSON400"
        '401':
          description: Пользователь не авторизирован
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorJSON401"
        '403':
          description: Недостаточно прав
          content:
            text/plain:
              schema:
                type: string
                example: forbidden
        '500':
          description: Ошибка со стороны сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorJSON500"

  /film/actor/:
    delete:
      summary: Удаление актера из фильма
      tags:
        - Film
        - admins
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FilmsIDActorID"
      responses:
        '200':
          description: Фильм удалён
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FilmID"
        '400':
          description: Невалидный запрос
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorJSON400"
        '401':
          description: Пользователь не авторизирован
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorJSON401"
        '403':
          description: Недостаточно прав
          content:
            text/plain:
              schema:
                type: string
                example: forbidden
        '500':
          description: Ошибка со стороны сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorJSON500"

  /film/sort:
    post:
      description: По умолчанию поле для сортировки - rating, по убыванию
      summary: Получение отсортированного списка фильмов
      tags:
        - Film
        - admins
        - users
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FilmSort"
      responses:
        '200':
          description: Успешное получение
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Films"
        '500':
          description: Ошибка со стороны сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorJSON500"

  /films/search:
    post:
      description: Получение списка фильмов по фрагменту фильма или имени актера, при указании обоих фрагметов происходит объединение множеств
      summary: Поиск фильмов по фрагменту названия фильма или имени актера
      tags:
        - Film
        - admins
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FilmSearch"
      responses:
        '200':
          description: Успешный поиск
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FilmsWithActor"
        '500':
          description: Ошибка со стороны сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorJSON500"
  /actor:
    post:
      summary: Добавление актера
      tags:
        - Actor
        - admins
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Actor"
      responses:
        '200':
          description: Успешное добавление
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActorID"
        '400':
          description: Невалидный запрос
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorJSON400"
        '401':
          description: Пользователь не авторизирован
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorJSON401"
        '403':
          description: Недостаточно прав
          content:
            text/plain:
              schema:
                type: string
                example: forbidden
        '500':
          description: Ошибка со стороны сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorJSON500"
  /actor/{id}:
    post:
      description: Требуется чтобы минимум одно поле было не пустое
      summary: Обновление актера
      tags:
        - Actor
        - admins
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActorToUpdate"
      responses:
        '200':
          description: Успешное обновление
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActorID"
        '400':
          description: Невалидный запрос
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorJSON400"
        '401':
          description: Пользователь не авторизирован
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorJSON401"
        '403':
          description: Недостаточно прав
          content:
            text/plain:
              schema:
                type: string
                example: forbidden
        '500':
          description: Ошибка со стороны сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorJSON500"

    delete:
      summary: Удаление актера по ID
      tags:
        - Actor
        - admins
      parameters:
        - name: id
          in: path
          required: true
          description: ID актера
          schema:
            type: string
            example: 1
      responses:
        '200':
          description: Успешное удаление
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActorID"
        '400':
          description: Невалидный запрос
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorJSON400"
        '401':
          description: Пользователь не авторизирован
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorJSON401"
        '403':
          description: Недостаточно прав
          content:
            text/plain:
              schema:
                type: string
                example: forbidden
        '500':
          description: Ошибка со стороны сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorJSON500"
  /actors:
    get:
      summary: Получение списка актеров
      tags:
        - Actor
        - users
        - admins
      responses:
        '200':
          description: Успешное получение актеров с фильмами
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Actor"
        '400':
          description: Невалидный запрос
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorJSON400"
        '401':
          description: Пользователь не авторизирован
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorJSON401"
        '403':
          description: Недостаточно прав
          content:
            text/plain:
              schema:
                type: string
                example: forbidden
        '500':
          description: Ошибка со стороны сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorJSON500"


components:
  schemas:
    UserID:
      type: object
      required:
        - user_id
      properties:
        user_id:
          type: integer
          example: 111
    User:
      type: object
      required:
        - login
        - password
      properties:
        login:
          type: string
          example: test
        password:
          type: string
          example: qwerty1

    Film:
      type: object
      required:
        - name
        - description
        - rating
        - release_date
      properties:
        name:
          type: string
          example: Titanic
          minLength: 1
          maxLength: 150
        description:
          type: string
          example: Tragic story
          maxLength: 1000
        rating:
          type: number
          example: 8.5
          minimum: 0.1
          maximum: 10
        release_date:
          type: string
          format: data-time
          example: '1998-02-20'

    Actor:
      type: object
      required:
        - first_name
        - last_name
        - gender
        - date_of_birth
      properties:
        first_name:
          type: string
          example: Leonardo
        last_name:
          type: string
          example: DiCaprio
        gender:
          type: string
          enum:
            - male
            - female
            - other
          example: male
        date_of_birth:
          type: string
          format: data-time
          example: '1974-11-11'

    Actors:
      type: array
      items:
        $ref: "#/components/schemas/Actor"

    ActorID:
      type: object
      properties:
        actor_id:
          type: integer
          example: 1

    ActorToUpdate:
      type: object
      properties:
        first_name:
          type: string
          example: Leonardo
        last_name:
          type: string
          example: DiCaprio
        gender:
          type: string
          enum:
            - male
            - female
            - other
          example: male
        date_of_birth:
          type: string
          format: data-time
          example: '1974-11-11'

    FilmWithActorToUpdate:
      type: object
      properties:
        name:
          type: string
          example: Titanic
          minLength: 1
          maxLength: 150
        description:
          type: string
          example: Tragic story
          maxLength: 1000
        rating:
          type: number
          example: 8.5
          minimum: 0.1
          maximum: 10
        release_date:
          type: string
          format: data-time
          example: '1998-02-20'
        actors:
          type: array
          items:
            $ref: "#/components/schemas/Actor"

    FilmWithActor:
      type: object
      required:
        - name
        - description
        - rating
        - release_date
        - actors
      properties:
        name:
          type: string
          example: Titanic
          minLength: 1
          maxLength: 150
        description:
          type: string
          example: Tragic story
          maxLength: 1000
        rating:
          type: number
          example: 8.5
          minimum: 0.1
          maximum: 10
        release_date:
          type: string
          format: data-time
          example: '1998-02-20'
        actors:
          type: array
          items:
            $ref: "#/components/schemas/Actor"

    Films:
      type: array
      items:
        $ref: "#/components/schemas/Film"

    ActorWithFilm:
      type: object
      properties:
        first_name:
          type: string
          example: Leonardo
        last_name:
          type: string
          example: DiCaprio
        gender:
          type: string
          enum:
            - male
            - female
            - other
          example: male
        date_of_birth:
          type: string
          format: data-time
          example: '1974-11-11'
        films:
          type: array
          items:
            $ref: "#/components/schemas/Film"

    ActorsWithFilms:
      type: array
      items:
        $ref: "#/components/schemas/ActorWithFilm"

    FilmsWithActor:
      type: array
      items:
        $ref: "#/components/schemas/FilmWithActor"

    FilmID:
      type: object
      required:
        - film_id
      properties:
        film_id:
          type: integer
          example: 11

    FilmSort:
      type: object
      properties:
        filed:
          type: string
          enum:
            - name
            - rating
            - release_date
          default: rating
        increasing:
          type: boolean
          default: false

    FilmSearch:
      type: object
      properties:
        name:
          type: string
          example: аник
        actor_name:
          type: string
          example: ona ic

    FilmsIDActorID:
      type: object
      required:
        - film_id
        - actor_id
      properties:
        film_id:
          type: integer
          example: 11
        actor_id:
          type: integer
          example: 1

    ErrorJSON400:
      type: object
      properties:
        error_message:
          type: string
          example: bad request

    ErrorJSON401:
      type: object
      properties:
        error_message:
          type: string
          example: login to your account

    ErrorJSON403:
      type: object
      properties:
        error_message:
          type: string
          example: forbidden

    ErrorJSON500:
      type: object
      properties:
        error_message:
          type: string
          example: server error